static void my_swap(int *a, int *b)
{
    *a = *a ^ *b;
    *b = *b ^ *a;
    *a = *a ^ *b;
}

/* 从小到大 */
static void slect_sort(int *arr, int len)
{
    int i, j, min;

    for (i = 0; i < len; i++) {
        min = arr[i];
        for (j = i + 1; j < len; j++) {
            if (arr[j] < min) {
                my_swap(&arr[j], &arr[i]);
            }
        }
    }
}

/* 从大到小 */
static void insert_sort(int *arr, int len)
{
    int i, j;

    for (i = 1; i < len; i++) {
    	for (j = i; j >= 1; j--) {
    		if (arr[j] > arr[j-1]) {
    			my_swap(&arr[j], &arr[j-1]);
    		} else {
    			break;
    		}
    	}
    }
}

/* 从小到大 */
static void bub_sort(int *arr, int len)
{
	int i, j;

	for (i = len - 1; i > 0; i--) {
		for (j = 0; j < i; j++) {
			if (arr[j + 1] < arr[j]) {
				my_swap(&arr[j + 1], &arr[j]);
			}
		}
	}
}

static void heap_up(int *heap, int num)
{
    while (num > 0 && (heap[num - 1] > heap[num / 2 - 1])) {
        my_swap(&heap[num - 1], &heap[num / 2 - 1]);
        num = num / 2 - 1;
        num += 1;
    }
}

static void heap_down(int *arr, int len)
{
	int i, j;

	i = 0;
    while ((2 * i + 1) < len) {
    	j = 2 * i + 1;
    	if (j + 1 < len && (arr[j] < arr[j + 1])) {
    		j++;
    	}

        if (arr[i] > arr[j]) {
        	break;
        }
        my_swap(&arr[i], &arr[j]);
        i = j;
    }

    return;
}

static void heap_sort(int *arr, int len)
{
    int i, j, heap[64], count;

    if (len >= 64) {
    	printf("overload!!!.\n");
    	return;
    }

    memset(&heap, 0, sizeof(int) * 64);
    count = 0;
    for (i = 0; i < len; i++) {
        heap[i] = arr[i];
        count++;
        heap_up(heap, count);
    }

    memcpy(arr, heap, sizeof(int) * len);
    printf("\n");
    for (j = 0; j < count; j++) {
    	printf("heap up heap[%d] = %d.\n", j, heap[j]);
    }
}

static int get_heap_top(int *arr, int *len)
{
	int rv;

    if (*len < 0) {
    	printf("param error, len = %d.\n", *len);
    	return -1;
    }

    rv = arr[0];
    *len -= 1;
    my_swap(&arr[0], &arr[*len]);
    heap_down(arr, *len);

    printf("rv = %d.\n", rv);
    return rv;
}
